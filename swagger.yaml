openapi: 3.0.0

info:
  title: users
  description: users API
  version: '0.1'

paths:
# [POST] login
  /login:
    post:
      requestBody:
        description: Email and Password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  type: string
                Password:
                  type: string
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
# [POST] users
  /signup:              
    post:
      summary: Account registration
      requestBody:
        description: user data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  type: string
                Password:
                  type: string
                Fullname:
                  type: string
                Username:
                  type: string
                Phone:
                  type: string
                Gender:
                  type: string
                Dob:
                  type: string
      responses:
        201:
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/signupResponse"
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
# [GET] users
  /user:
    get:
      security:
        - bearerAuth: []
      tags:
      - user
      summary: Find All Users
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  $ref: "#/components/schemas/users"
        500:
          description: 'Server Error'



# [GET] users/id
  /user/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
      - user
      summary: Find User By Id
      parameters:
      - in: path
        name: id
        description: User Id
        required: true
        schema:
          type : integer
          format: int64
          minimum: 1
      responses:
        
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/users"
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] user/id
    put:
      security:
        - bearerAuth: []
      tags:
      - user
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        schema:
          type : integer
          format: int64
          minimum: 1
      requestBody:
        description: user data
        required: true
        content:
          appliction/json:     
            schema:
              $ref:  "#/components/schemas/users"
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] user/id
    delete:
      security:
        - bearerAuth: []
      tags:
      - user
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        schema:
          type : integer
          format: int64
          minimum: 1
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
  # [GET] events that current user joined        
  /user/joinedEvents/:
    get:
      security:
        - bearerAuth: []
      tags:
      - user
      summary: Get Events that Current User Joined
      responses:
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: array
                  items:
                    type: array
                    $ref: "#/components/schemas/event"
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
# [GET] events
  /events:
    get:
      security:
        - bearerAuth: []
      tags:
      - events
      summary: Find All events
      responses:
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: array
                  items:
                    type: array
                    $ref: "#/components/schemas/event"
        500:
          description: 'Server Error'
# [POST] event
    post:
      security:
        - bearerAuth: []
      tags:
        - events
      summary: Create new event 
      requestBody:
        description: Event data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Title:
                  type: string
                EventStartTime:
                  type: string
                EventEndTime:
                  type: string
                PlaceID:
                  type: string
      responses:
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/event"
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
    put:
      security:
        - bearerAuth: []
      tags:
        - events
      summary: Update new event 
      requestBody:
        description: Event data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Title:
                  type: string
                EventStartTime:
                  type: string
                EventEndTime:
                  type: string
      responses:
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/event"
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
# [GET] event/id
  /events/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - events
      summary: Get event by Id
      parameters:
      - name: id
        in: path
        description: event id
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      responses:
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/event"
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
  /events/{id}/usersJoined:
    get:
      security:
        - bearerAuth: []
      tags:
        - events
      summary: Get all users in an event
      parameters:
      - name: id
        in: path
        description: event id
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      responses:
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/usereventgroup"
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
  # [POST] event/id/join Join an event
  /events/{id}/join:
    post:
      security:
        - bearerAuth: []
      tags:
        - events
      summary: Join an event
      parameters:
      - name: id
        in: path
        description: event id
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      responses:
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/usereventgroup"
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'


# [PUT] event


# [GET] places
  /places:
    get:
      security:
        - bearerAuth: []
      tags:
      - places
      summary: Find All places
      responses:
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: array
                  items:
                    type: array
                    $ref: "#/components/schemas/place"
        500:
          description: 'Server Error'  
# [GET] places by searching for address
  /places/search:
    get:
      security:
        - bearerAuth: []
      tags:
      - places
      summary: Find Places with location query search
      parameters:
      - name: q
        in: query
        description: location name
        required: true
        schema:
          type: string
          format: string
          minimum: 3
      responses:
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: array
                  items:
                    type: array
                    $ref: "#/components/schemas/place"
        500:
          description: 'Server Error'

# [GET] places/id
  /places/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - places
      summary: Get place by Id
      parameters:
      - name: id
        in: path
        description: place id
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      responses:
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/place"
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'  

# [GET] events of a place
  /places/{id}/events:
    get:
      security:
        - bearerAuth: []
      tags:
        - places
      summary: Get events of a place by place ID
      parameters:
      - name: id
        in: path
        description: place id
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      responses:
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/event" 
                      - $ref: "#/components/schemas/place"   
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'  
# [GET] cities
  /cities/?q=:
    get:
      security:
        - bearerAuth: []
      tags:
      - cities
      summary: Find City with query search
      parameters:
      - name: q
        in: query
        description: city name
        required: true
        schema:
          type: string
          format: string
          minimum: 2
      responses:
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: array
                  items:
                    type: array
                    $ref: "#/components/schemas/city"
        500:
          description: 'Server Error'
          
  /cities/{cityid}/places:
    get:
      security:
        - bearerAuth: []
      tags:
      - cities
      summary: Get Places in a city
      parameters:
      - name: cityid
        in: path
        description: city id
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      responses:
        200:
          description: 'OK'
          content:
              application/json:
                schema:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/place" 
                      - $ref: "#/components/schemas/city"    
        500:
          description: 'Server Error'        
# definitions
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    loginResponse:
      type: object
      required: 
        - Email
        - Password
      properties:
        data:
          type: object
          properties:
            Dob:
              type: string
            Email: 
              type: string
            Fullname: 
              type: string
            Gender:
              type: string
            ID:
              type: number
            Phone:
              type: number
            token:
              type: object
              properties:
                expiresIn:
                  type: number
                token:
                  type: string
        message:
          type: string
    signupResponse:
      type: object
      required: 
        - Email
        - Password
      properties:
        data:
          type: object
          $ref: "#/components/schemas/users"
        message:
          type: string
    users:
      type: object
      required:
        - Email
        - Password    
      properties:
        ID:
          type: integer
          description: user Id
        Fullname:
          type: string
        Username:
          type: string
        Email:
          type: string
          description: user Email
        Phone:
          type: number
        Password:
          type: string
          description: user Password
        Dob:
          type: string
        Gender:
          type: string
        Pfp:
          type: object
    loginUser:
      type: object
      required:
          - Email
          - Password
      properties:
        Email:
          type: string
          description: user Email
        Password:
          type: string
          description: user Password      
    place:
      type: object
      required:
        - name
        - location
        - type
      properties:
        PlaceID:
          type: integer
          description: place id
        Name:
          type: string
        Type:
          type: string
          description: Activity type of the Place
        Description:
          type: string
          description: Information of the Place
        Location:
          type: string
          description: Address of the place
        CityID:
          type: integer
        PictureURI:
          type: string
          description: URI of main picture of the place
    usereventgroup:
      type: object
      required:
        - event
        - user
      properties:
        id:
          type: integer
        eventid :
          type: integer

        userid:
          type: integer
        joinedAt:
          type: string
    eventMessages:
      type: object
      required:
        - timestamp
        - content
      properties:
        id:
          type: integer
        timestamp:
          type: string
        content:
          type: string
        userEvent:
          type: object
          $ref: "#/components/schemas/usereventgroup"
    event:
      type: object
      properties:
        EventId:
          type: integer
        Title:
          type: string
        CreatedAt:
          type: string
        EventStartTime:
          type: string
        EventEndTime:
          type: string
        PlaceID:
          type: integer      
        UserID:
          type: integer
    city:
      type: object
      properties:
        CityID:
          type: integer
        Name:
          type: string
        StateProvince:
          type: string
        Country:
          type: string
        CountryCode:
          type: string

   
